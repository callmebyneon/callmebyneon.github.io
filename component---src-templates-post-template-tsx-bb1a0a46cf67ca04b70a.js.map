{"version":3,"file":"component---src-templates-post-template-tsx-bb1a0a46cf67ca04b70a.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostTOC.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nexport type PostHeadInfoProps = {\r\n  title: string\r\n  date: string\r\n  category: string\r\n  tags: string[]\r\n  emoji: string\r\n}\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n  padding: 20px 0;\r\n  color: rgb(var(--accent));\r\n\r\n  @media (max-width: 1200px) {\r\n    width: 768px;\r\n    padding: 40px 20px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst Date = styled.div`\r\n  margin-bottom: 1rem;\r\n  font-size: 14px;\r\n`\r\n\r\nconst Title = styled.div`\r\n  // display: -webkit-box;\r\n  // overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  // text-overflow: ellipsis;\r\n  // white-space: normal;\r\n  // -webkit-line-clamp: 2;\r\n  // -webkit-box-orient: vertical;\r\n  margin-bottom: 1rem;\r\n  font-size: 45px;\r\n  font-weight: 900;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 30px;\r\n  }\r\n`\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: baseline;\r\n  margin-top: 10px;\r\n  font-size: 1.125rem;\r\n  font-weight: 300;\r\n  line-height: 1.4;\r\n\r\n  & .tags {\r\n    font-size: 0.875rem;\r\n    margin-left: 1em;\r\n    text-transform: lowercase;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    font-size: 16px;\r\n    font-weight: 400;\r\n  }\r\n`\r\n\r\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\r\n  title,\r\n  date,\r\n  category,\r\n  tags,\r\n  emoji,\r\n}) {\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <Date>{date}</Date>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <b className=\"category\">{category}</b>\r\n        <p className=\"tags\">{tags.join(' / ')}</p>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHeadInfo\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\r\n\r\ntype PostHeadProps = PostHeadInfoProps & {\r\n  emoji: string\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  margin: 40px 0 100px;\r\n\r\n  @media (max-width: 768px) {\r\n    margin: 40px 0 20px;\r\n  }\r\n`\r\n\r\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\r\n  title,\r\n  date,\r\n  category,\r\n  tags,\r\n  emoji,\r\n}) {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <PostHeadInfo\r\n        title={title}\r\n        date={date}\r\n        category={category}\r\n        tags={tags}\r\n        emoji={emoji}\r\n      />\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\ninterface PostContentProps {\r\n  html: string\r\n}\r\n\r\nconst TocWrapper = styled.div``\r\n\r\nconst TocRenderer = styled.div`\r\n  // Renderer Style\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 260px;\r\n  max-height: calc(100vh - 80px);\r\n  margin: 0 80px 30px 0;\r\n  padding: 0;\r\n  position: sticky;\r\n  left: calc(50vw - (768px / 2) - 260px);\r\n  top: 56px;\r\n  word-break: keep-all;\r\n  overflow: hidden auto;\r\n\r\n  li {\r\n    list-style: none;\r\n    display: block;\r\n    width: 96%;\r\n    color: rgb(var(--toc-color));\r\n    line-height: 2;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n\r\n    & > a {\r\n      display: block;\r\n      padding: 0.2em 0;\r\n      white-space: break-space;\r\n      line-height: 1.4;\r\n      // overflow: hidden;\r\n      // text-overflow: ellipsis;\r\n    }\r\n\r\n    @media (hover: hover) {\r\n      &:hover {\r\n        // font-weight: 700;\r\n        color: rgb(var(--accent)); // rgb(64, 107, 159);\r\n        border-width: 2px;\r\n      }\r\n    }\r\n\r\n    // h2 heading\r\n    & > ul > li {\r\n      margin-left: 0.5em;\r\n      padding-left: 1em;\r\n      border-left: 1px solid;\r\n\r\n      // h3 heading\r\n      & > ul > li {\r\n        margin-left: 0.5em;\r\n        padding-left: 1em;\r\n        border-left: 1px solid;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 1300px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n  return (\r\n    <TocWrapper>\r\n      <TocRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n    </TocWrapper>\r\n  )\r\n}\r\n\r\nexport default PostContent\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport 'gatsby-remark-vscode/styles.css'\r\n\r\ninterface PostContentProps {\r\n  html: string\r\n}\r\n\r\nconst MarkdownWrapper = styled.div`\r\n  width: 100%;\r\n  margin: 0;\r\n`\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  word-break: keep-all;\r\n  white-space: break-space;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 0.8em 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 700;\r\n    margin-bottom: 1em;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    padding-top: 2.5em;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    padding-top: 0;\r\n  }\r\n\r\n  h1 + :is(ol, ul),\r\n  h2 + :is(ol, ul),\r\n  h3 + :is(ol, ul) {\r\n    padding: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 1.875rem;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    background: rgba(var(--accent), 0.03);\r\n    border-left: 2px solid rgba(var(--accent));\r\n    font-weight: 700;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 20px 0;\r\n  }\r\n\r\n  li {\r\n    width: 100%;\r\n\r\n    & > ul,\r\n    & > p + * {\r\n      padding: 8px 0;\r\n    }\r\n\r\n    & > pre[data-language] {\r\n      margin: 8px 0;\r\n    }\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid rgba(var(--accent));\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    display: inline;\r\n    width: 100%;\r\n    color: rgb(var(--anchor-color));\r\n    text-decoration: underline;\r\n    overflow-wrap: anywhere;\r\n    word-break: break-word;\r\n\r\n    &.anchor.after {\r\n      display: inline;\r\n    }\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[data-language] {\r\n    margin: 30px 0;\r\n    // padding: 15px 20px;\r\n    border-radius: 12px;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(var(--extreme), 0.5);\r\n      border-radius: 3px;\r\n    }\r\n\r\n    .line-numbers-rows {\r\n      padding: 1em 0;\r\n      padding-left: 8px;\r\n    }\r\n  }\r\n\r\n  & :not(pre) > code {\r\n    padding: 1px 6px;\r\n    border-radius: 4px;\r\n    background: rgb(var(--text-color));\r\n    color: rgb(var(--background-color));\r\n  }\r\n\r\n  code,\r\n  pre {\r\n    tab-size: 2;\r\n    // font-size: 0.875rem;\r\n    // font-family: 'Fira Mono', monospace;\r\n  }\r\n\r\n  img {\r\n    max-width: 100%;\r\n    border-radius: 8px;\r\n  }\r\n\r\n  figure {\r\n    & figcaption {\r\n      margin-bottom: 1rem;\r\n      text-align: center;\r\n      font-size: 0.875rem;\r\n      opacity: 0.8;\r\n    }\r\n  }\r\n\r\n  table {\r\n    border-collapse: collapse;\r\n  }\r\n\r\n  thead {\r\n    background-color: rgb(var(--shade));\r\n  }\r\n\r\n  tr {\r\n    border-bottom: 1px solid rgb(var(--shade));\r\n  }\r\n\r\n  th,\r\n  td {\r\n    padding: 2px 8px;\r\n\r\n    &:not(:last-child) {\r\n      border-right: 1px solid rgb(var(--shade));\r\n    }\r\n  }\r\n\r\n  // Markdown Responsive Design\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 80px 20px;\r\n    line-height: 1.6;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    hr {\r\n      margin: 3.5714rem 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n  return (\r\n    <MarkdownWrapper>\r\n      <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n    </MarkdownWrapper>\r\n  )\r\n}\r\n\r\nexport default PostContent\r\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'callmebyneon/callmebyneon.github.io' // 자신 계정의 레포지토리로 설정\r\n\r\ntype UtterancesAttributesType = {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst UtterancesWrapper = styled.div`\r\n  margin-top: 80px;\r\n  @media (max-width: 768px) {\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: UtterancesAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: 'preferred-color-scheme',\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget\r\n","import React, { FunctionComponent } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { PostPageItemType } from 'types/PostItem.types'\r\nimport Template from 'components/Common/Template'\r\nimport PostHead from '../components/Post/PostHead'\r\nimport PostTOC from '../components/Post/PostTOC'\r\nimport PostContent from '../components/Post/PostContent'\r\nimport CommentWidget from 'components/Post/CommentWidget'\r\nimport styled from '@emotion/styled'\r\nimport BottomNav from 'components/Common/BottomNav'\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostPageItemType[]\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n}\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  margin-bottom: 80px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 768px;\r\n  margin: 0;\r\n\r\n  @media (max-width: 768px) {\r\n    width: calc(100vw - 20px * 2);\r\n    max-width: 768px;\r\n  }\r\n`\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}) {\r\n  const {\r\n    node: {\r\n      html,\r\n      tableOfContents,\r\n      frontmatter: { title, summary, date, category, tags, emoji },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={emoji}>\r\n      <ContentWrapper>\r\n        <PostTOC html={tableOfContents} />\r\n        <div>\r\n          <Content>\r\n            <PostHead\r\n              title={title}\r\n              date={date}\r\n              category={category}\r\n              tags={tags}\r\n              emoji={emoji}\r\n            />\r\n            <PostContent html={html} />\r\n          </Content>\r\n          <CommentWidget />\r\n        </div>\r\n      </ContentWrapper>\r\n      <BottomNav />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          tableOfContents(maxDepth: 3)\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            category\r\n            tags\r\n            emoji\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["PostHeadInfoWrapper","Date","Title","PostData","PostHeadInfo","title","date","category","tags","emoji","___EmotionJSX","className","join","PostHeadWrapper","PostHead","TocWrapper","TocRenderer","PostContent","html","dangerouslySetInnerHTML","__html","MarkdownWrapper","MarkdownRenderer","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","ContentWrapper","target","name","styles","Content","PostTemplate","edges","data","allMarkdownRemark","href","location","node","tableOfContents","_edges$0$node$frontma","frontmatter","summary","Template","description","url","image","PostTOC","CommentWidget","BottomNav"],"sourceRoot":""}