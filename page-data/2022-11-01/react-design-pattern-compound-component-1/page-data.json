{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-11-01/react-design-pattern-compound-component-1/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><small><em>last modified: 2022-11-03</em></small></p>\n<h1 id=\"intro\" style=\"position:relative;\">Intro<a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>리액트 컴포넌트를 만들다 보면 어느 순간 아래와 같은 god-like 컴포넌트들을 만들고 있다는 것을 깨닫게 됩니다.\r\n특히 테이블이나 모달, 입력창처럼 간단해 보여서 작성하기 시작한 컴포넌트가 점점 기능과 인터랙션이 몇 백 줄짜리 컴포넌트가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Table\r\n  id<span class=\"token operator\">=</span><span class=\"token string\">\"table-id\"</span>\r\n  caption<span class=\"token operator\">=</span><span class=\"token string\">\"New Data Table\"</span>\r\n  columns<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>columns<span class=\"token punctuation\">}</span>\r\n  rowData<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>rowData<span class=\"token punctuation\">}</span>\r\n  onRowClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRowClick<span class=\"token punctuation\">}</span>\r\n  rowClassName<span class=\"token operator\">=</span><span class=\"token string\">\"table-row\"</span>\r\n  cellClassName<span class=\"token operator\">=</span><span class=\"token string\">\"table-cell\"</span>\r\n  refreshFn<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRefreshData<span class=\"token punctuation\">}</span>\r\n  tableStyle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tableStyle<span class=\"token punctuation\">}</span>\r\n  checkboxSelection\r\n<span class=\"token operator\">></span></code></pre></div>\n<p>위처럼 컴포넌트를 만들어놓고 후에 기능을 추가하거나 레이아웃이 변경된다면 <code class=\"language-text\">Table</code> 컴포넌트를 뒤져서 수정해야 할 부분을 찾고 고친 다음에야 컴포넌트를 제대로 사용할 수 있을 것입니다.\r\n하지만 테이블을 합성 컴포넌트(Compound component)로 만들어 사용한다면 위와 같은 컴포넌트의 문제점 몇 가지를 해결할 수 있습니다.</p>\n<h1 id=\"what-is-the-problem-of-god-like-component\" style=\"position:relative;\">What is the problem of God-like component<a href=\"#what-is-the-problem-of-god-like-component\" aria-label=\"what is the problem of god like component permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>아래 글에서는 이러한 어려움을 크게 세 가지로 정리하고 있습니다.</p>\n<blockquote>\n<p><a href=\"https://jjenzz.com/compound-components\" target=\"_blank\" rel=\"nofollow\">https://jjenzz.com/compound-components</a><br>\n*번역: <a href=\"https://itchallenger.tistory.com/752\" target=\"_blank\" rel=\"nofollow\">https://itchallenger.tistory.com/752</a></p>\n</blockquote>\n<br />\n<ol>\n<li><strong>Config driven for consumers</strong> : (API)사용자를 위한 설정</li>\n<li><strong>Maintenance overhead</strong> : 유지 보수 부담</li>\n<li><strong>Difficult to paint a mental picture</strong> : 멘탈 모델 파악의 어려움</li>\n</ol>\n<p>다시 맨 처음의 <code class=\"language-text\">Table</code> 컴포넌트를 살펴보면, 아마도 아래와 같이 이미 작성되어 있을 것이라 짐작할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Table</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> \r\n    id<span class=\"token punctuation\">,</span>\r\n    caption<span class=\"token punctuation\">,</span>\r\n    columns<span class=\"token punctuation\">,</span>\r\n    rowData<span class=\"token punctuation\">,</span>\r\n    onRowClick<span class=\"token punctuation\">,</span>\r\n    rowClassName<span class=\"token punctuation\">,</span>\r\n    cellClassName<span class=\"token punctuation\">,</span>\r\n    refreshFn<span class=\"token punctuation\">,</span>\r\n    tableStyle<span class=\"token punctuation\">,</span>\r\n    checkboxSelection <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// ...</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>caption<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>caption<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>caption<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>table<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>thead<span class=\"token operator\">></span>\r\n          <span class=\"token operator\">&lt;</span>tr<span class=\"token operator\">></span>\r\n            <span class=\"token punctuation\">{</span>checkboxSelection \r\n              <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleToggleAllCheckbox<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"toggle all\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span> \r\n              <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">{</span>columns<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cell</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>th key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cell<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>cell<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tr<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>thead<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>tbody<span class=\"token operator\">></span>\r\n          <span class=\"token punctuation\">{</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n            <span class=\"token operator\">&lt;</span>tr key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onRowClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\r\n              <span class=\"token punctuation\">{</span>checkboxSelection \r\n                <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleToggleCheckbox</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"toggle\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span> \r\n                <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\r\n              <span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">.</span>cells<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cell</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>td key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cell<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>cell<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tr<span class=\"token operator\">></span>\r\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tbody<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>table<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 <code class=\"language-text\">Table</code> 컴포넌트에 테이블 footer나 pagination을 추가하려면 어떻게 해야 할까요? 혹은 각 셀의 값을 계산하여 새로운 열이 추가되어야 한다면?</p>\n<p>전자는 <code class=\"language-text\">caption</code>이나 <code class=\"language-text\">thead</code>를 조건부로 표시하는 것처럼 어렵지 않을 수 있습니다. 하지만 이 상태에서 후자의 경우에는 고민이 생깁니다.</p>\n<p>물론 데이터 자체가 가공되어 컴포넌트의 <code class=\"language-text\">rowData</code>로 전달받을 수도 있겠지만 만약 서비스 사용자가 직접 가공된 값을 추가하고 테이블을 확인하고 싶다면? <code class=\"language-text\">Table</code> 컴포넌트에서 액션에 맞는 데이터 가공을 수행해야 할까요? <code class=\"language-text\">Table</code> 컴포넌트에 점점 더 데이터가 개입하고 있습니다. 이렇게 되면 이 컴포넌트는 다른 곳에서 다른 형태로 절대 사용하지 못할 것입니다.</p>\n<p>재사용의 문제만 있는 것은 아닙니다. 가령 데이터 구조가 변경되어 테이블 컴포넌트를 수정해야 하는 상황이 발생할 때마다 스타일 코드와 인터랙션 코드와 데이터를 다루는 코드가 한 군데에 섞이게 된다면 의도하지 않은 오류가 발생하기 너무 쉬운 환경이 됩니다. 그 오류가 내가 이해하지 못하는 오류라면 디자인 담당자에게 물어야 할지 데이터 API 담당자에게 물어야 할지 결정하기 어려운 상황이 될지도 모릅니다.</p>\n<h1 id=\"compound-component-instead-god-like-component\" style=\"position:relative;\"><strong>Compound Component</strong> instead God-like component<a href=\"#compound-component-instead-god-like-component\" aria-label=\"compound component instead god like component permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>이러한 상황을 대비하여 합성 컴포넌트 구조를 사용하여 아래처럼 컴포넌트를 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TableViewer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useGetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// ...</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>ActionBar <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>TableRoot<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>TableCaption<span class=\"token operator\">></span>New Data Table<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCaption<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>TableHead<span class=\"token operator\">></span>\r\n          <span class=\"token operator\">&lt;</span>TableRow<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>TableCell<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleToggleAllCheckbox<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"toggle all\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>TableCell<span class=\"token operator\">></span>First Name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>TableCell<span class=\"token operator\">></span>Last Name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>TableCell<span class=\"token operator\">></span>Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableRow<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableHead<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>TableBody<span class=\"token operator\">></span>\r\n          <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n            <span class=\"token operator\">&lt;</span>TableRow key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"table-row\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleRowClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\r\n              <span class=\"token operator\">&lt;</span>TableCell className<span class=\"token operator\">=</span><span class=\"token string\">\"table-cell\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleToggleAllCheckbox<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"toggle all\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n              <span class=\"token operator\">&lt;</span>TableCell className<span class=\"token operator\">=</span><span class=\"token string\">\"table-cell\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n              <span class=\"token operator\">&lt;</span>TableCell className<span class=\"token operator\">=</span><span class=\"token string\">\"table-cell\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n              <span class=\"token operator\">&lt;</span>TableCell className<span class=\"token operator\">=</span><span class=\"token string\">\"table-cell\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableCell<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableRow<span class=\"token operator\">></span>\r\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableBody<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TableRoot<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>언뜻 보기엔 컴포넌트를 만들 때 코드를 많이 작성하느냐 혹은 사용할 때 코드를 많이 작성하는냐의 차이처럼 생각될 수도 있습니다. 심지어는 코드의 양만 보기에는 합성 컴포넌트가 만들고 사용하기에 복잡해 보이기도 합니다.</p>\n<p>하지만 첫 번째 코드처럼 <code class=\"language-text\">Table</code> 컴포넌트를 만들고 사용한다면, 기능이나 인터랙션만이 아니라 데이터 구조가 변경될 때도 마찬가지로 <code class=\"language-text\">Table</code>을 수정할 후 사용해야만 합니다. 반면 합성 컴포넌트로 만들어진 <code class=\"language-text\">Table</code> 컴포넌트는 데이터의 구조에 대해 알 필요가 없게 됩니다. 만들고자 하는 UI 컴포넌트에서 데이터 핸들링을 최소화하고 그래픽 인터페이스만을 담당한다면 불필요한 컴포넌트 수정을 하지 않아도 되며, 해당 컴포넌트를 재사용하기에도 쉬워집니다.</p>\n<p>이러한 점은 한 명의 개발자가 컴포넌트를 만들고 데이터를 사용할 때는 크게 느끼지 못하기도 합니다. 하지만 서비스가 커지고 두 명 이상의 개발자가 함께 개발하는 상황에서는 이러한 문제로 소비하게 되는 시간이 늘어날수록 결국 개발자가 더 중요한 문제에 집중할 수 있는 시간을 빼앗습니다.</p>\n<p>아래 그림에서 설명하듯이 하나의 큰 구조의 각 컴포넌트를 관심사별로 분리하고 역할을 분담하여 나눕니다.</p>\n<figure>\n  <img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FY8oEa%2FbtrseQcYF2P%2FTk6r938XievtUGe6jpjTc0%2Fimg.png\" alt=\"합성 컴포넌트를 이용한 관심사의 분리\">\n  <figcaption>대부분의 로직은 기본 Root 컴포넌트에 포함되며, React.Context를 사용해 모든 자식 컴포넌트의 states와 handlers를 공유하여 책임 소재를 명확히 분리할 수 있다.<br>이미지 출처: https://cocobi.tistory.com/120</figcaption>\n</figure>\n<p>하지만 역시 아래 그림에서처럼 너무 자유도가 높아도 예상치 못한 문제가 발생할 수 있으므로 고정된 레이아웃이나 구조, 순서가 필요하다면 서브 컴포넌트를 작성하며 설정합니다.</p>\n<figure>\n  <img src=\"https://blog.kakaocdn.net/dn/bsGzm3/btrslWptc6h/GJRzOiaO6OcWi6MgZeFODK/img.png\" alt=\"합성 컴포넌트를 사용하여 발생하는 과도한 UI 유연성\">\n  <figcaption>유연성이 높다는 것은 예기치 않은 동작을 유발할 가능성이 크다는 것을 의미한다.<br>이미지 출처: https://cocobi.tistory.com/120</figcaption>\n</figure>\n<br />\n<p>끝으로 다음은 합성 컴포넌트에 대한 예시들입니다.</p>\n<p><strong>Compound Components Ref.</strong></p>\n<ul>\n<li><a href=\"https://www.w3.org/WAI/ARIA/apg/example-index/tabs/tabs-manual.html\" target=\"_blank\" rel=\"nofollow\">https://www.w3.org/WAI/ARIA/apg/example-index/tabs/tabs-manual.html</a></li>\n<li><a href=\"https://reach.tech/tabs/\" target=\"_blank\" rel=\"nofollow\">https://reach.tech/tabs/</a></li>\n<li><a href=\"https://www.radix-ui.com/docs/primitives/components/select#anatomy\" target=\"_blank\" rel=\"nofollow\">https://www.radix-ui.com/docs/primitives/components/select#anatomy</a></li>\n</ul>\n<p>이외에도, <a href=\"https://ant.design/components/layout/\" target=\"_blank\" rel=\"nofollow\">Ant Design의 Layout 컴포넌트</a> 같이 UI 라이브러리들에서도 합성 컴포넌트 구조를 확인할 수 있습니다.</p>\n<h1 id=\"outro-this-is-no-silver-bullet-too\" style=\"position:relative;\">Outro, This is no silver bullet too<a href=\"#outro-this-is-no-silver-bullet-too\" aria-label=\"outro this is no silver bullet too permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>물론 합성 컴포넌트 패턴 하나만으로 당연히 너무 많은 문제를 해결할 수는 없습니다. 바로 위에서도 언급했지만 너무 유연한 프로그램은 예상치 못한 문제를 뱉어 냅니다. 그리고 현재 우리 주변의 모든 애플리 메이션과 서비스들은 점점 더 복잡해지고 사용자에게 맞출 것을 요구하고 있습니다. 이러한 복잡성을 한 번에 해소할 은탄환(silver bullet)은 존재하지 않는다고 1986년에 이야기했다고 합니다.(Fred Brooks, “Silver Bullet-Essence and Accidents of Software Engineering”) 그럴수록 적(?)을 알기 위해서는 보다 더 복합적이고 유연한 방법이 필요하지 않나라는 생각이 들기도 합니다.</p>\n<p>합성 컴포넌트도 마찬가지로 한 가지 방법이기 때문에 이쯤에서 다음으로 넘어가, 합성 컴포넌트를 만들고 실제 사용할 때는 어떠할지 살펴보도록 하겠습니다.</p>\n<p align=\"center\">⏭️</p>","tableOfContents":"<ul>\n<li><a href=\"#intro\">Intro</a></li>\n<li><a href=\"#what-is-the-problem-of-god-like-component\">What is the problem of God-like component</a></li>\n<li><a href=\"#compound-component-instead-god-like-component\"><strong>Compound Component</strong> instead God-like component</a></li>\n<li><a href=\"#outro-this-is-no-silver-bullet-too\">Outro, This is no silver bullet too</a></li>\n</ul>","frontmatter":{"title":"React Design Pattern - Compound Component (1)","summary":"What is Compound Component","date":"2022.11.01.","category":"React","tags":["react","design pattern","compound component"],"emoji":"🧙‍♂️"}}}]}},"pageContext":{"slug":"/2022-11-01/react-design-pattern-compound-component-1/"}},"staticQueryHashes":[]}