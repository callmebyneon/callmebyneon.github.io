{"version":3,"file":"component---src-templates-post-template-tsx-3d77abe2d589e529322b.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Common/ScrollTopCTA.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostTOC.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst TopButton = styled.button`\r\n  all: unset;\r\n  display: block;\r\n  position: fixed;\r\n  bottom: 50%;\r\n  right: 1em;\r\n  font-size: 1.25rem;\r\n  transition: 200ms all;\r\n\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      color: rgb(64, 107, 159);\r\n      // transform: translateY(-10%);\r\n    }\r\n  }\r\n`\r\n\r\nconst ScrollTopCTA = () => {\r\n  const onScrollToTop = () => {\r\n    window.scrollTo({ top: 0, left: 0, behavior: 'smooth' })\r\n  }\r\n\r\n  return (\r\n    <TopButton title=\"go to top of this page\" onClick={onScrollToTop}>\r\n      <FontAwesomeIcon icon={faArrowUp} />\r\n    </TopButton>\r\n  )\r\n}\r\n\r\nexport default ScrollTopCTA\r\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  category: string\n  tags: string[]\n  emoji: string\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 1200px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 20px 0;\n  color: #000;\n\n  @media (max-width: 1200px) {\n    width: 768px;\n    padding: 40px 20px;\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst Date = styled.div`\n  margin-bottom: 1rem;\n  font-size: 14px;\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  margin-bottom: 1rem;\n  font-size: 45px;\n  font-weight: 900;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: baseline;\n  margin-top: 10px;\n  font-size: 1.125rem;\n  font-weight: 300;\n  line-height: 1.4;\n\n  & .tags {\n    font-size: 0.875rem;\n    margin-left: 1em;\n    text-transform: lowercase;\n  }\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 16px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  category,\n  tags,\n  emoji,\n}) {\n  return (\n    <PostHeadInfoWrapper>\n      <Date>{date}</Date>\n      <Title>{title}</Title>\n      <PostData>\n        <b className=\"category\">{category}</b>\n        <p className=\"tags\">{tags.join(' / ')}</p>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  emoji: string\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  margin: 40px 0 100px;\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  category,\n  tags,\n  emoji,\n}) {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo\n        title={title}\n        date={date}\n        category={category}\n        tags={tags}\n        emoji={emoji}\n      />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst TocWrapper = styled.div``\n\nconst TocRenderer = styled.div`\n  // Renderer Style\n\n  display: flex;\n  flex-direction: column;\n  width: 260px;\n  max-height: calc(100vh - 80px);\n  margin: 0 80px 30px 0;\n  padding: 0;\n  position: sticky;\n  left: calc(50vw - (768px / 2) - 260px);\n  top: 56px;\n  word-break: keep-all;\n  overflow-y: scroll;\n\n  li {\n    list-style: none;\n    display: block;\n    width: 96%;\n    color: #aaa;\n    line-height: 2;\n    font-size: 14px;\n    font-weight: 400;\n\n    & > a {\n      display: block;\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    }\n\n    @media (hover: hover) {\n      &:hover {\n        font-weight: 700;\n        color: rgb(64, 107, 159);\n        border-width: 2px;\n      }\n    }\n\n    // h2 heading\n    & > ul > li {\n      margin-left: 0.5em;\n      padding-left: 1em;\n      border-left: 1px solid;\n\n      // h3 heading\n      & > ul > li {\n        margin-left: 0.5em;\n        padding-left: 1em;\n        border-left: 1px solid;\n      }\n    }\n  }\n\n  @media (max-width: 1300px) {\n    display: none;\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return (\n    <TocWrapper>\n      <TocRenderer dangerouslySetInnerHTML={{ __html: html }} />\n    </TocWrapper>\n  )\n}\n\nexport default PostContent\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownWrapper = styled.div`\n  width: 100%;\n  margin: 0;\n`\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  word-break: keep-all;\n  white-space: break-space;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 1rem;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 0.8em 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 700;\n    margin-bottom: 1em;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    padding-top: 2em;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    padding-top: 0;\n  }\n\n  h1 {\n    font-size: 1.875rem;\n  }\n\n  h2 {\n    font-size: 1.5rem;\n  }\n\n  h3 {\n    font-size: 1.25rem;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    background: rgba(0, 0, 0, 0.03);\n    border-left: 2px solid #000000;\n    font-weight: 700;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 20px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px 20px;\n    border-radius: 12px;\n    overflow: auto;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'] {\n    border-radius: 4px;\n    padding: 2px 6px;\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n    background-color: #e3e1e1;\n    font-size: 0.875rem;\n    font-family: 'Noto Sans Mono', monospace;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 3.5714rem 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return (\n    <MarkdownWrapper>\n      <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n    </MarkdownWrapper>\n  )\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'callmebyneon/callmebyneon.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { PostPageItemType } from 'types/PostItem.types'\r\nimport Template from 'components/Common/Template'\r\nimport PostHead from '../components/Post/PostHead'\r\nimport PostTOC from '../components/Post/PostTOC'\r\nimport PostContent from '../components/Post/PostContent'\r\nimport CommentWidget from 'components/Post/CommentWidget'\r\nimport styled from '@emotion/styled'\r\nimport ScrollTopCTA from 'components/Common/ScrollTopCTA'\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostPageItemType[]\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n}\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n`\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 768px;\r\n  margin: 0;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}) {\r\n  const {\r\n    node: {\r\n      html,\r\n      tableOfContents,\r\n      frontmatter: { title, summary, date, category, tags, emoji },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={emoji}>\r\n      <ContentWrapper>\r\n        <PostTOC html={tableOfContents} />\r\n        <Content>\r\n          <PostHead\r\n            title={title}\r\n            date={date}\r\n            category={category}\r\n            tags={tags}\r\n            emoji={emoji}\r\n          />\r\n          <PostContent html={html} />\r\n        </Content>\r\n      </ContentWrapper>\r\n      <CommentWidget />\r\n      <ScrollTopCTA />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          tableOfContents(maxDepth: 3)\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            category\r\n            tags\r\n            emoji\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["TopButton","___EmotionJSX","title","onClick","window","scrollTo","top","left","behavior","FontAwesomeIcon","icon","faArrowUp","PostHeadInfoWrapper","Date","Title","PostData","date","category","tags","emoji","className","join","PostHeadWrapper","PostHeadInfo","TocWrapper","TocRenderer","html","dangerouslySetInnerHTML","__html","MarkdownWrapper","MarkdownRenderer","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","ContentWrapper","target","name","styles","Content","edges","data","allMarkdownRemark","href","location","node","tableOfContents","frontmatter","summary","Template","description","url","image","PostTOC","PostHead","PostContent","CommentWidget","ScrollTopCTA"],"sourceRoot":""}